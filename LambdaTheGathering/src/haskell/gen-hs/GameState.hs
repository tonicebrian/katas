{-# LANGUAGE DeriveDataTypeable #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.8.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module GameState where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Int
import Data.Typeable ( Typeable )
import qualified Data.Map as Map
import qualified Data.Set as Set

import Thrift


import Service_Types
import qualified GameState_Iface as Iface
-- HELPER FUNCTIONS AND STRUCTURES --

data ProcessMove_args = ProcessMove_args{f_ProcessMove_args_theMove :: Maybe Move} deriving (Show,Eq,Ord,Typeable)
write_ProcessMove_args oprot record = do
  writeStructBegin oprot "ProcessMove_args"
  case f_ProcessMove_args_theMove record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("theMove",T_STRUCT,1)
    write_Move oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_ProcessMove_args_fields iprot record = do
  (_,_t13,_id14) <- readFieldBegin iprot
  if _t13 == T_STOP then return record else
    case _id14 of 
      1 -> if _t13 == T_STRUCT then do
        s <- (read_Move iprot)
        read_ProcessMove_args_fields iprot record{f_ProcessMove_args_theMove=Just s}
        else do
          skip iprot _t13
          read_ProcessMove_args_fields iprot record
      _ -> do
        skip iprot _t13
        readFieldEnd iprot
        read_ProcessMove_args_fields iprot record
read_ProcessMove_args iprot = do
  _ <- readStructBegin iprot
  record <- read_ProcessMove_args_fields iprot (ProcessMove_args{f_ProcessMove_args_theMove=Nothing})
  readStructEnd iprot
  return record
data ProcessMove_result = ProcessMove_result deriving (Show,Eq,Ord,Typeable)
write_ProcessMove_result oprot record = do
  writeStructBegin oprot "ProcessMove_result"
  writeFieldStop oprot
  writeStructEnd oprot
read_ProcessMove_result_fields iprot record = do
  (_,_t18,_id19) <- readFieldBegin iprot
  if _t18 == T_STOP then return record else
    case _id19 of 
      _ -> do
        skip iprot _t18
        readFieldEnd iprot
        read_ProcessMove_result_fields iprot record
read_ProcessMove_result iprot = do
  _ <- readStructBegin iprot
  record <- read_ProcessMove_result_fields iprot (ProcessMove_result{})
  readStructEnd iprot
  return record
data GetLastUpdate_args = GetLastUpdate_args deriving (Show,Eq,Ord,Typeable)
write_GetLastUpdate_args oprot record = do
  writeStructBegin oprot "GetLastUpdate_args"
  writeFieldStop oprot
  writeStructEnd oprot
read_GetLastUpdate_args_fields iprot record = do
  (_,_t23,_id24) <- readFieldBegin iprot
  if _t23 == T_STOP then return record else
    case _id24 of 
      _ -> do
        skip iprot _t23
        readFieldEnd iprot
        read_GetLastUpdate_args_fields iprot record
read_GetLastUpdate_args iprot = do
  _ <- readStructBegin iprot
  record <- read_GetLastUpdate_args_fields iprot (GetLastUpdate_args{})
  readStructEnd iprot
  return record
data GetLastUpdate_result = GetLastUpdate_result{f_GetLastUpdate_result_success :: Maybe [Slot]} deriving (Show,Eq,Ord,Typeable)
write_GetLastUpdate_result oprot record = do
  writeStructBegin oprot "GetLastUpdate_result"
  case f_GetLastUpdate_result_success record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("success",T_LIST,0)
    (let {f [] = return (); f (_viter27:t) = do {write_Slot oprot _viter27;f t}} in do {writeListBegin oprot (T_STRUCT,fromIntegral $ Prelude.length _v); f _v;writeListEnd oprot})
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_GetLastUpdate_result_fields iprot record = do
  (_,_t29,_id30) <- readFieldBegin iprot
  if _t29 == T_STOP then return record else
    case _id30 of 
      0 -> if _t29 == T_LIST then do
        s <- (let {f 0 = return []; f n = do {v <- (read_Slot iprot);r <- f (n-1); return $ v:r}} in do {(_etype34,_size31) <- readListBegin iprot; f _size31})
        read_GetLastUpdate_result_fields iprot record{f_GetLastUpdate_result_success=Just s}
        else do
          skip iprot _t29
          read_GetLastUpdate_result_fields iprot record
      _ -> do
        skip iprot _t29
        readFieldEnd iprot
        read_GetLastUpdate_result_fields iprot record
read_GetLastUpdate_result iprot = do
  _ <- readStructBegin iprot
  record <- read_GetLastUpdate_result_fields iprot (GetLastUpdate_result{f_GetLastUpdate_result_success=Nothing})
  readStructEnd iprot
  return record
process_processMove (seqid, iprot, oprot, handler) = do
  args <- read_ProcessMove_args iprot
  readMessageEnd iprot
  rs <- return (ProcessMove_result)
  res <- (do
    Iface.processMove handler (f_ProcessMove_args_theMove args)
    return rs)
  writeMessageBegin oprot ("processMove", M_REPLY, seqid);
  write_ProcessMove_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
process_getLastUpdate (seqid, iprot, oprot, handler) = do
  args <- read_GetLastUpdate_args iprot
  readMessageEnd iprot
  rs <- return (GetLastUpdate_result Nothing)
  res <- (do
    res <- Iface.getLastUpdate handler
    return rs{f_GetLastUpdate_result_success= Just res})
  writeMessageBegin oprot ("getLastUpdate", M_REPLY, seqid);
  write_GetLastUpdate_result oprot res
  writeMessageEnd oprot
  tFlush (getTransport oprot)
proc_ handler (iprot,oprot) (name,typ,seqid) = case name of
  "processMove" -> process_processMove (seqid,iprot,oprot,handler)
  "getLastUpdate" -> process_getLastUpdate (seqid,iprot,oprot,handler)
  _ -> do
    skip iprot T_STRUCT
    readMessageEnd iprot
    writeMessageBegin oprot (name,M_EXCEPTION,seqid)
    writeAppExn oprot (AppExn AE_UNKNOWN_METHOD ("Unknown function " ++ name))
    writeMessageEnd oprot
    tFlush (getTransport oprot)
process handler (iprot, oprot) = do
  (name, typ, seqid) <- readMessageBegin iprot
  proc_ handler (iprot,oprot) (name,typ,seqid)
  return True
