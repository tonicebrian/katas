{-# LANGUAGE DeriveDataTypeable #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.8.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module GameState_Client(processMove,getLastUpdate) where
import Data.IORef
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Int
import Data.Typeable ( Typeable )
import qualified Data.Map as Map
import qualified Data.Set as Set

import Thrift


import Service_Types
import GameState
seqid = newIORef 0
processMove (ip,op) arg_theMove = do
  send_processMove op arg_theMove
  recv_processMove ip
send_processMove op arg_theMove = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("processMove", M_CALL, seqn)
  write_ProcessMove_args op (ProcessMove_args{f_ProcessMove_args_theMove=Just arg_theMove})
  writeMessageEnd op
  tFlush (getTransport op)
recv_processMove ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_ProcessMove_result ip
  readMessageEnd ip
  return ()
getLastUpdate (ip,op) = do
  send_getLastUpdate op
  recv_getLastUpdate ip
send_getLastUpdate op = do
  seq <- seqid
  seqn <- readIORef seq
  writeMessageBegin op ("getLastUpdate", M_CALL, seqn)
  write_GetLastUpdate_args op (GetLastUpdate_args{})
  writeMessageEnd op
  tFlush (getTransport op)
recv_getLastUpdate ip = do
  (fname, mtype, rseqid) <- readMessageBegin ip
  if mtype == M_EXCEPTION then do
    x <- readAppExn ip
    readMessageEnd ip
    throw x
    else return ()
  res <- read_GetLastUpdate_result ip
  readMessageEnd ip
  case f_GetLastUpdate_result_success res of
    Just v -> return v
    Nothing -> do
      throw (AppExn AE_MISSING_RESULT "getLastUpdate failed: unknown result")
