{-# LANGUAGE DeriveDataTypeable #-}
{-# OPTIONS_GHC -fno-warn-missing-fields #-}
{-# OPTIONS_GHC -fno-warn-missing-signatures #-}
{-# OPTIONS_GHC -fno-warn-name-shadowing #-}
{-# OPTIONS_GHC -fno-warn-unused-imports #-}
{-# OPTIONS_GHC -fno-warn-unused-matches #-}

-----------------------------------------------------------------
-- Autogenerated by Thrift Compiler (0.8.0)                      --
--                                                             --
-- DO NOT EDIT UNLESS YOU ARE SURE YOU KNOW WHAT YOU ARE DOING --
-----------------------------------------------------------------

module Service_Types where
import Prelude ( Bool(..), Enum, Double, String, Maybe(..),
                 Eq, Show, Ord,
                 return, length, IO, fromIntegral, fromEnum, toEnum,
                 (&&), (||), (==), (++), ($), (-) )

import Control.Exception
import Data.ByteString.Lazy
import Data.Int
import Data.Typeable ( Typeable )
import qualified Data.Map as Map
import qualified Data.Set as Set

import Thrift


data Move = Move{f_Move_playerId :: Maybe Int32,f_Move_actionType :: Maybe Int32,f_Move_slot :: Maybe Int32,f_Move_card :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_Move oprot record = do
  writeStructBegin oprot "Move"
  case f_Move_playerId record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("playerId",T_I32,1)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_Move_actionType record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("actionType",T_I32,2)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_Move_slot record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("slot",T_I32,3)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_Move_card record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("card",T_STRING,4)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Move_fields iprot record = do
  (_,_t3,_id4) <- readFieldBegin iprot
  if _t3 == T_STOP then return record else
    case _id4 of 
      1 -> if _t3 == T_I32 then do
        s <- readI32 iprot
        read_Move_fields iprot record{f_Move_playerId=Just s}
        else do
          skip iprot _t3
          read_Move_fields iprot record
      2 -> if _t3 == T_I32 then do
        s <- readI32 iprot
        read_Move_fields iprot record{f_Move_actionType=Just s}
        else do
          skip iprot _t3
          read_Move_fields iprot record
      3 -> if _t3 == T_I32 then do
        s <- readI32 iprot
        read_Move_fields iprot record{f_Move_slot=Just s}
        else do
          skip iprot _t3
          read_Move_fields iprot record
      4 -> if _t3 == T_STRING then do
        s <- readString iprot
        read_Move_fields iprot record{f_Move_card=Just s}
        else do
          skip iprot _t3
          read_Move_fields iprot record
      _ -> do
        skip iprot _t3
        readFieldEnd iprot
        read_Move_fields iprot record
read_Move iprot = do
  _ <- readStructBegin iprot
  record <- read_Move_fields iprot (Move{f_Move_playerId=Nothing,f_Move_actionType=Nothing,f_Move_slot=Nothing,f_Move_card=Nothing})
  readStructEnd iprot
  return record
data Slot = Slot{f_Slot_playerId :: Maybe Int32,f_Slot_vitality :: Maybe Int32,f_Slot_value :: Maybe String} deriving (Show,Eq,Ord,Typeable)
write_Slot oprot record = do
  writeStructBegin oprot "Slot"
  case f_Slot_playerId record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("playerId",T_I32,1)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_Slot_vitality record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("vitality",T_I32,2)
    writeI32 oprot _v
    writeFieldEnd oprot}
  case f_Slot_value record of {Nothing -> return (); Just _v -> do
    writeFieldBegin oprot ("value",T_STRING,3)
    writeString oprot _v
    writeFieldEnd oprot}
  writeFieldStop oprot
  writeStructEnd oprot
read_Slot_fields iprot record = do
  (_,_t8,_id9) <- readFieldBegin iprot
  if _t8 == T_STOP then return record else
    case _id9 of 
      1 -> if _t8 == T_I32 then do
        s <- readI32 iprot
        read_Slot_fields iprot record{f_Slot_playerId=Just s}
        else do
          skip iprot _t8
          read_Slot_fields iprot record
      2 -> if _t8 == T_I32 then do
        s <- readI32 iprot
        read_Slot_fields iprot record{f_Slot_vitality=Just s}
        else do
          skip iprot _t8
          read_Slot_fields iprot record
      3 -> if _t8 == T_STRING then do
        s <- readString iprot
        read_Slot_fields iprot record{f_Slot_value=Just s}
        else do
          skip iprot _t8
          read_Slot_fields iprot record
      _ -> do
        skip iprot _t8
        readFieldEnd iprot
        read_Slot_fields iprot record
read_Slot iprot = do
  _ <- readStructBegin iprot
  record <- read_Slot_fields iprot (Slot{f_Slot_playerId=Nothing,f_Slot_vitality=Nothing,f_Slot_value=Nothing})
  readStructEnd iprot
  return record
