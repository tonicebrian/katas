* Problem description
You have encountered a new fancy online auction that offers lots of
products. You are only interested in their price and weight. 

#+name: product-definition
#+begin_src haskell
data Product = P Double Double -- Price & Weight
#+end_src

We shall say that product A is strictly preferred over product B if A
costs less than B and is not heavier (they may be of equal weight) or
if A weighs less and is not more expensive (they can have equal
price). 

This can be modelled by providing the corresponding Eq and Ord
instances for the Product type

#+name: ord-instance
#+begin_src haskell
  instance Eq Product where
    (P p1 w1) == (P p2 w2) = (p1 == p2) && (w1 == w2)
  
  instance Ord Product where
    compare (P p1 w1) (P p2 w2) 
       | ((p1 < p2) && (w1 <= w2)) || ((p1 <= p2) && (w1 < w2)) = GT 
       | otherwise  = LT
#+end_src

We shall call a product A a bargain if there is no product B such that
B is better than A. Similarly, we shall call a product C a terrible
deal if there exists no product D such that C is better than D. Note
that according to our definitions, the same product may be both a
bargain and a terrible deal! Only wacky auctioneers sell such products
though.

#+name: is-bargain
#+begin_src haskell
  isBargain :: Product -> [Product] -> Bool
  isBargain p ps = p == (maximum ps)
    
  isTerrible :: Product -> [Product] -> Bool
  isTerrible p ps = p == (minimum ps)  
#+end_src

One day you wonder how many terrible deals and bargains are
offered. The number of products, N, is too large for your human-sized
brain though. Fortunately, you discovered that the auction manager is
terribly lazy and decided to sell the products based on a very simple
pseudo-random number generator.

If product i has price Pi and weight Wi, then the following holds for
product i+1:

Pi = ((A*Pi-1 + B) mod M) + 1 (for all i = 2..N) Wi = ((C*Wi-1 + D)
mod K) + 1 (for all i = 2..N) You carefully calculated the parameters
for the generator (P1, W1, M, K, A, B, C and D). Now you want to
calculate the number of terrible deals and bargains on the site.

#+name: gen-points
#+begin_src haskell
  genPoints :: [Int] -> [(Int,Int)]
  genPoints N:P1:W1:M:K:A:B:C:[] = take N $ iterate (\(pi,wi) -> ((A*pi+M) `mod` M),(C*wi+d)`mod`K))) (P1,W1)
  genPoints _ = error "Number of parameters erroneus"
#+end_src

Input The first line of the input file contains a single integer T:
the number of test cases. T lines follow, each representing a single
test case with 9 space-separated integers: N, P1, W1, M, K, A, B, C
and D.

#+name: main
#+begin_src haskell
  main = do
    args <- getArgs
    contents <- readFile (args !! 0)
    let problems = map (map (read :: String->Int) . words) $ tail $ lines contents
    putStrLn "Hello world!!"
#+end_src

Output Output T lines, one for each test case. For each case, output
"Case #t: a b", where t is the test case number (starting from 1), a
is the number of terrible deals and b is the number of bargains.

Constraints
1 ≤ T ≤ 20
1 ≤ N ≤ 1018
1 ≤ M, K ≤ 107
1 ≤ P1 ≤ M
1 ≤ W_1 ≤ K
0 ≤ A,B,C,D ≤ 109
* Solution
If we represent the points in a 2D grid, the terrible bargains are
those in the upper right side of the convex hull. The bargains are in
the lower left side of the convex hull.

** General algorithm
#+name: bargains
#+begin_src haskell
  bargains :: [Int] -> (Int,Int)
  bargains problem = 
    where 
      bargains = filter (inBox west south) hull
      hull = grahamScan $ genPoints problem      
      north = maximumBy (\a b-> compare (fst a) (fst b)) hull
      east = maximumBy (\a b-> compare (snd a) (snd b)) hull
      south = minimumBy  (\a b-> compare (fst a) (fst b)) hull
      west = minimumBy (\a b-> compare (snd a) (snd b)) hull
      
      inBox (x1,y1) (x2,y2) (a,b) = xCond && yCond
        where
          xCond = (x1 >= a) && (x2 <= a)
          yCond = (y1 <= b) && (y2 >= b)
#+end_src

** Graham algorithm
#+name: graham-algo
#+begin_src haskell
data Turn = Left | Right | Colinear
            deriving (Show, Eq)

grahamScan :: [(Int,Int)] -> [(Int,Int)]
grahamScan points
    | length points < 3 = error "Degenerate"
    | otherwise         = 
        let (firstPoint:rest) = findLowest points
            sortedRest = sortBy (compare `on` (cosine firstPoint)) rest

            loop (a:b:[]) = case turn a b firstPoint of
                              Main.Left -> b : []
                              _    -> []
            loop (a:b:c:ps) = case turn a b c of
                                Main.Left -> b : loop (b:c:ps)
                                _    -> loop (a:c:ps)

        in firstPoint : loop (firstPoint:sortedRest)
#+end_src

This is the code for the angle generator of two points
#+name: angle
#+begin_src haskell
cosine (x1,y1) (x2,y2) = dx / len
  where
    dx = fromIntegral $ x1 - x2
    dy = fromIntegral $ y1 - y2
    len = sqrt (dx * dx + dy * dy)
#+end_src

This is the function that tells you wheter three points are counter
clock wise:

#+name: ccw
#+begin_src haskell
turn :: (Int,Int) -> (Int,Int) -> (Int,Int) -> Turn
turn (ax,ay) (bx,by) (cx,cy) = case compare cross 0 of
               GT -> Main.Left
               EQ -> Main.Colinear
               LT -> Main.Right
    where
      cross = x1 * y2 - x2 * y1
      x1 = bx - ax
      y1 = by - ay
      x2 = cx - bx
      y2 = cy - by
#+end_src

The first step of the algorithm is to find the lowest left point

#+name: findLowest
#+begin_src haskell
findLowest points = loop points []
  where
    loop (a:[]) ps = a:ps
    loop (a@(x1,y1):b@(x2,y2):rest) ps =        
      if (y1 < y2) || (y1 == y2 && x1 < x2)
      then loop (a:rest) (b:ps)
      else loop (b:rest) (a:ps)
#+end_src

* Data
#+name: input-data
5
5 1 4 5 7 1 0 1 2
3 1 3 3 3 1 0 1 1
8 1 3 3 3 1 0 1 2
13 5 7 5 9 1 3 2 5
11 2 3 5 7 11 13 17 19

Case #1: 3 3
Case #2: 3 3
Case #3: 2 3
Case #4: 2 2
Case #5: 3 1 

* Appendix
** References
*** Exposition of the auction problem
http://notes.tweakblogs.net/blog/7524/facebook-hacker-cup-qualification-round-problem-analysis.html
*** Graham algorithm
http://www.tapdancinggoats.com/graham-scan-in-haskell.htm
http://en.wikipedia.org/wiki/Graham_scan



** Code
#+name: Auction.hs
#+begin_src haskell :noweb yes :tangle Auction.hs
<<imports>>

<<product-definition>>

<<ord-instance>>

<<is-bargain>>

<<findLowest>>

<<ccw>>

<<angle>>

<<graham-algo>>

<<main>>
#+end_src

#+name: imports
#+begin_src haskell
import System.Environment
import Data.List
import Data.Function
#+end_src

